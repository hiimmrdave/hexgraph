import*as e from"./hex.js";import{round as t}from"./cell.js";import{cubeLerp as r}from"./math.js";const o=Object.freeze(e.makeNode({q:0,r:0,s:0},"Cell")),n=Object.freeze(e.makeNode({q:2,r:-1,s:-1},"Cell")),s=function(e){return"number"==typeof e?[e,e]:[e[0],e[1]]},a=function({source:t=o,toward:r=n}){const s=["q","r","s"],a=e.subtract(r,t),i=Math.max(Math.abs(a.q),Math.abs(a.r),Math.abs(a.s));for(const e of s)if(i===Math.abs(a[e])){const t=-i/a[e]>0?1:-1;return{dirs:Object.fromEntries([...s.slice(s.indexOf(e)),...s.slice(0,s.indexOf(e))].map(((e,t)=>[["ic","ia","ib"][t],e]))),sign:t}}return null};export function line({source:s=o,toward:a=n}){if(e.areEqual(s,a))return(new Map).set(s.id,s);const i=e.distance(s,a),c=new Map;for(let e=0;e<=i;e++){const o=t(r(s,a,1/i*e));c.set(o.id,o)}return c}export function ring({source:t=o,size:r=2}){if((r=s(r))[0]<1)return(new Map).set(t.id,t);const n=new Map;let a=e.makeNode(e.add(t,e.multiply(e.DIRECTIONS[4],r[0]/6)),"Cell");for(let t=0;t<6;t++)for(let o=0;o<r[0]/6;o++)n.set(a.id,a),a=e.cells(a)[t];return n}export function cone({source:t=o,toward:r=n,size:i=4}){const c=new Map,{dirs:f,sign:l}=a({source:t,toward:r});i=s(i);for(let r=0;r<i[0];r++)for(let o=0;o<i[0]-r;o++){const n=-(r+o),s=e.makeNode(e.add({[f.ia]:l*r,[f.ib]:l*o,[f.ic]:l*n},t),"Cell");c.set(s.id,s)}return c}export function hexagon({source:t=o,size:r=2}){if((r=s(r))[0]<1)return(new Map).set(t.id,t);const n=new Map;for(let o=-r[0];o<=r[0];o++)for(let s=-r[0];s<=r[0];s++)if(Math.abs(o)+Math.abs(s)+Math.abs(-o-s)<2*r[0]){const r=-(o+s),a=e.makeNode(e.add(t,{q:o,r:s,s:r}),"Cell");n.set(a.id,a)}return n}export function rhombus({source:t=o,toward:r=n,size:i=2}){const c=new Map,{dirs:f,sign:l}=a({source:t,toward:r});i=s(i);for(let r=0;r<i[0];r++)for(let o=0;o<i[0];o++){const n=-(r+o),s=e.makeNode(e.add({[f.ia]:l*r,[f.ib]:l*o,[f.ic]:l*n},t),"Cell");c.set(s.id,s)}return c}export function intersection(t,r){const o=new Map;for(const[n,s]of t.entries())r.has(n)&&e.areEqual(r.get(n),s)&&o.set(n,s);return o}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdWJzZXQudHMiXSwibmFtZXMiOlsiSGV4Iiwicm91bmQiLCJjdWJlTGVycCIsIkNFTExaRVJPIiwiT2JqZWN0IiwiZnJlZXplIiwibWFrZU5vZGUiLCJxIiwiciIsInMiLCJDRUxMT05FIiwibWFrZVR3b1NpemUiLCJzaXplIiwiZmluZFdlZGdlIiwic291cmNlIiwidG93YXJkIiwiaGV4Q29vcmRzIiwiZGlyIiwic3VidHJhY3QiLCJtYXgiLCJNYXRoIiwiYWJzIiwiY29vcmQiLCJkaXJlY3Rpb25TaWduIiwiZGlycyIsImZyb21FbnRyaWVzIiwic2xpY2UiLCJpbmRleE9mIiwibWFwIiwiZSIsImkiLCJzaWduIiwibGluZSIsImFyZUVxdWFsIiwiTWFwIiwic2V0IiwiaWQiLCJ0IiwiZGlzdGFuY2UiLCJpaSIsIm5ld0NlbGwiLCJyaW5nIiwicmluZ0NlbGwiLCJhZGQiLCJtdWx0aXBseSIsIkRJUkVDVElPTlMiLCJpaiIsImNlbGxzIiwiY29uZSIsImlhIiwiaWIiLCJpYyIsImhleGFnb24iLCJuZXdOb2RlIiwicmhvbWJ1cyIsImludGVyc2VjdGlvbiIsImEiLCJiIiwia2V5IiwidmFsIiwiZW50cmllcyIsImhhcyIsImdldCJdLCJtYXBwaW5ncyI6IlVBSVlBLE1BQVMsMkJBQ1pDLE1BQWEsK0JBQ2JDLE1BQWdCLFlBb0J6QixNQUFNQyxFQUF5QkMsT0FBT0MsT0FDbENMLEVBQUlNLFNBQVMsQ0FBRUMsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FBSyxTQUVyQ0MsRUFBd0JOLE9BQU9DLE9BQzdCTCxFQUFJTSxTQUFTLENBQUVDLEVBQUcsRUFBR0MsR0FBSSxFQUFHQyxHQUFJLEdBQUssU0FFdkNFLEVBQWMsU0FDWkMsR0FFQSxNQUFvQixpQkFBVEEsRUFDRixDQUFDQSxFQUFNQSxHQUVULENBQUNBLEVBQUssR0FBSUEsRUFBSyxLQUV4QkMsRUFBWSxVQUFtQkMsT0FDN0JBLEVBQVNYLEVBQVFZLE9BQ2pCQSxFQUFTTCxJQUtU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