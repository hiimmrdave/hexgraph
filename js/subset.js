import*as e from"./hex.js";import{round as t}from"./cell.js";import{cubeLerp as r}from"./math.js";const o=Object.freeze(e.makeNode({q:0,r:0,s:0},"Cell")),a=Object.freeze(e.makeNode({q:2,r:-1,s:-1},"Cell")),s=function(e){return"number"==typeof e?{a:e,b:e}:e},n=function({source:t=o,toward:r=a}){const s=["q","r","s"],n=e.subtract(r,t),i=Math.max(Math.abs(n.q),Math.abs(n.r),Math.abs(n.s));for(const e of s)if(i===Math.abs(n[e])){const t=-i/n[e]>0?1:-1;return{dirs:Object.fromEntries([...s.slice(s.indexOf(e)),...s.slice(0,s.indexOf(e))].map(((e,t)=>[["ic","ia","ib"][t],e]))),sign:t}}return null};export function line({source:s=o,toward:n=a}){if(e.areEqual(s,n))return(new Map).set(s.id,s);const i=e.distance(s,n),c=new Map;for(let e=0;e<=i;e++){const o=t(r(s,n,1/i*e));c.set(o.id,o)}return c}export function ring({source:t=o,size:r=2}){if((r=s(r)).a<1)return(new Map).set(t.id,t);const a=new Map;let n=e.makeNode(e.add(t,e.multiply(e.DIRECTIONS[4],r.a)),"Cell");for(let t=0;t<6;t++)for(let o=0;o<r.a;o++)a.set(n.id,n),n=e.cells(n)[t];return a}export function cone({source:t=o,toward:r=a,size:i=4}){const c=new Map,{dirs:l,sign:f}=n({source:t,toward:r});i=s(i);for(let r=0;r<i.a;r++)for(let o=0;o<i.a-r;o++){const a=-(r+o),s=e.makeNode(e.add({[l.ia]:f*r,[l.ib]:f*o,[l.ic]:f*a},t),"Cell");c.set(s.id,s)}return c}export function hexagon({source:t=o,size:r=2}){const a=new Map;for(let o=-(r=s(r)).a;o<=r.a;o++)for(let s=-r.a;s<=r.a;s++)if(Math.abs(o)+Math.abs(s)+Math.abs(-o-s)<2*r.a){const r=-(o+s),n=e.makeNode(e.add(t,{q:o,r:s,s:r}),"Cell");a.set(n.id,n)}return a}export function rhombus({source:t=o,toward:r=a,size:i=2}){const c=new Map,{dirs:l,sign:f}=n({source:t,toward:r});i=s(i);for(let r=0;r<i.a;r++)for(let o=0;o<i.b;o++){const a=-(r+o),s=e.makeNode(e.add({[l.ia]:f*r,[l.ib]:f*o,[l.ic]:f*a},t),"Cell");c.set(s.id,s)}return c}export function intersection(t,r){const o=new Map;for(const[a,s]of t)r.has(a)&&e.areEqual(r.get(a),s)&&o.set(a,s);return o}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdWJzZXQudHMiXSwibmFtZXMiOlsiSGV4Iiwicm91bmQiLCJjdWJlTGVycCIsIkNFTExaRVJPIiwiT2JqZWN0IiwiZnJlZXplIiwibWFrZU5vZGUiLCJxIiwiciIsInMiLCJDRUxMT05FIiwibWFrZVR3b1NpemUiLCJzaXplIiwiYSIsImIiLCJmaW5kV2VkZ2UiLCJzb3VyY2UiLCJ0b3dhcmQiLCJoZXhDb29yZHMiLCJkaXIiLCJzdWJ0cmFjdCIsIm1heCIsIk1hdGgiLCJhYnMiLCJjb29yZCIsImRpcmVjdGlvblNpZ24iLCJkaXJzIiwiZnJvbUVudHJpZXMiLCJzbGljZSIsImluZGV4T2YiLCJtYXAiLCJlIiwiaSIsInNpZ24iLCJsaW5lIiwiYXJlRXF1YWwiLCJNYXAiLCJzZXQiLCJpZCIsInQiLCJkaXN0YW5jZSIsImlpIiwibmV3Q2VsbCIsInJpbmciLCJyaW5nQ2VsbCIsImFkZCIsIm11bHRpcGx5IiwiRElSRUNUSU9OUyIsImlqIiwiY2VsbHMiLCJjb25lIiwiaWEiLCJpYiIsImljIiwiW29iamVjdCBPYmplY3RdIiwiaGV4YWdvbiIsIm5ld05vZGUiLCJyaG9tYnVzIiwiaW50ZXJzZWN0aW9uIiwia2V5IiwidmFsIiwiaGFzIiwiZ2V0Il0sIm1hcHBpbmdzIjoiVUFJWUEsTUFBUywyQkFDWkMsTUFBYSwrQkFDYkMsTUFBZ0IsWUFTekIsTUFBTUMsRUFBeUJDLE9BQU9DLE9BQ2xDTCxFQUFJTSxTQUFTLENBQUVDLEVBQUcsRUFBR0MsRUFBRyxFQUFHQyxFQUFHLEdBQUssU0FFckNDLEVBQXdCTixPQUFPQyxPQUM3QkwsRUFBSU0sU0FBUyxDQUFFQyxFQUFHLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQUFLLFNBRXZDRSxFQUFjLFNBQWdCQyxHQUM1QixNQUFvQixpQkFBVEEsRUFDRixDQUFFQyxFQUFHRCxFQUFNRSxFQUFHRixHQUVoQkEsR0FFVEcsRUFBWSxVQUFtQkMsT0FDN0JBLEVBQVNiLEVBQVFjLE9BQ2pCQSxFQUFTUCxJQUtULE1BQU1RLEVBQWlDLENBQUMsSUFBSyxJQUFLLEtBQ2hEQyxFQUFNbkIsRUFBSW9CLFNBQVNILEVBQVFELEdBQzNCSyxFQUFNQyxLQUFLRCxJQUFJQyxLQUFLQyxJQUFJSixFQUFJWixHQUFJZSxLQUFLQyxJQUFJSixFQUFJWCxHQUFJYyxLQUFLQyxJQUFJSixFQUFJVixJQUNoRSxJQUFLLE1BQU1lLEtBQVNOLEVBQ2xCLEdBQUlHLElBQVFDLEtBQUtDLElBQUlKLEVBQUlLLElBQVMsQ0FDaEMsTUFBTUMsR0FBeUJKLEVBQU1GLEVBQUlLLEdBQVMsRUFBSSxHQUFLLEVBTzNELE1BQU8sQ0FBRUUsS0FOV3RCLE9BQU91QixZQUN2QixJQUNLVCxFQUFVVSxNQUFNVixFQUFVVyxRQUFRTCxPQUNsQ04sRUFBVVUsTUFBTSxFQUFHVixFQUFVVyxRQUFRTCxLQUN4Q00sS0FBSSxDQUFDQyxFQUFHQyxJQUFNLENBQUMsQ0FBQyxLQUFNLEtBQU0sTUFBTUEsR0FBSUQsTUFFWkUsS0FBTVIsR0FHMUMsT0FBTyxhQVFMLFNBQVVTLE1BQUtsQixPQUNuQkEsRUFBU2IsRUFBUWMsT0FDakJBLEVBQVNQLElBRVQsR0FBSVYsRUFBSW1DLFNBQVNuQixFQUFRQyxHQUFTLE9BQU8sSUFBSW1CLEtBQU1DLElBQUlyQixFQUFPc0IsR0FBSXRCLEdBQ2xFLE1BQU11QixFQUFJdkMsRUFBSXdDLFNBQVN4QixFQUFRQyxHQUN6QmlCLEVBQU8sSUFBSUUsSUFDakIsSUFBSyxJQUFJSyxFQUFLLEVBQUdBLEdBQU1GLEVBQUdFLElBQU0sQ0FDOUIsTUFBTUMsRUFBd0J6QyxFQUM1QkMsRUFBU2MsRUFBUUMsRUFBUyxFQUFJc0IsRUFBS0UsSUFFckNQLEVBQUtHLElBQUlLLEVBQVFKLEdBQUlJLEdBRXZCLE9BQU9SLFNBWUgsU0FBVVMsTUFBSzNCLE9BQ25CQSxFQUFTYixFQUFRUyxLQUNqQkEsRUFBTyxJQUdQLElBREFBLEVBQU9ELEVBQVlDLElBQ1ZDLEVBQUksRUFBRyxPQUFPLElBQUl1QixLQUFNQyxJQUFJckIsRUFBT3NCLEdBQUl0QixHQUNoRCxNQUFNMkIsRUFBTyxJQUFJUCxJQUNqQixJQUFJUSxFQUFXNUMsRUFBSU0sU0FDakJOLEVBQUk2QyxJQUFJN0IsRUFBUWhCLEVBQUk4QyxTQUFTOUMsRUFBSStDLFdBQVcsR0FBSW5DLEVBQUtDLElBQ3JELFFBRUYsSUFBSyxJQUFJNEIsRUFBSyxFQUFHQSxFQUFLLEVBQUdBLElBQ3ZCLElBQUssSUFBSU8sRUFBSyxFQUFHQSxFQUFLcEMsRUFBS0MsRUFBR21DLElBQzVCTCxFQUFLTixJQUFJTyxFQUFTTixHQUFJTSxHQUN0QkEsRUFBVzVDLEVBQUlpRCxNQUFNTCxHQUFVSCxHQUduQyxPQUFPRSxTQVFILFNBQVVPLE1BQUtsQyxPQUNuQkEsRUFBU2IsRUFBUWMsT0FDakJBLEVBQVNQLEVBQU9FLEtBQ2hCQSxFQUFPLElBRVAsTUFBTXNDLEVBQWdCLElBQUlkLEtBQ3hCVixLQUFFQSxFQUFJTyxLQUFFQSxHQUFTbEIsRUFBVSxDQUFFQyxPQUFBQSxFQUFRQyxPQUFBQSxJQUN2Q0wsRUFBT0QsRUFBWUMsR0FDbkIsSUFBSyxJQUFJdUMsRUFBSyxFQUFHQSxFQUFLdkMsRUFBS0MsRUFBR3NDLElBQzVCLElBQUssSUFBSUMsRUFBSyxFQUFHQSxFQUFLeEMsRUFBS0MsRUFBSXNDLEVBQUlDLElBQU0sQ0FDdkMsTUFBTUMsSUFBT0YsRUFBS0MsR0FDaEJWLEVBQVUxQyxFQUFJTSxTQUNaTixFQUFJNkMsSUFDRixDQUNFUyxDQUFDNUIsRUFBS3lCLElBQUtsQixFQUFPa0IsRUFDbEJHLENBQUM1QixFQUFLMEIsSUFBS25CLEVBQU9tQixFQUNsQkUsQ0FBQzVCLEVBQUsyQixJQUFLcEIsRUFBT29CLEdBRXBCckMsR0FFRixRQUVKa0MsRUFBS2IsSUFBSUssRUFBUUosR0FBSUksR0FHekIsT0FBT1EsU0FPSCxTQUFVSyxTQUFRdkMsT0FDdEJBLEVBQVNiLEVBQVFTLEtBQ2pCQSxFQUFPLElBRVAsTUFBTTJDLEVBQW1CLElBQUluQixJQUU3QixJQUFLLElBQUllLElBRFR2QyxFQUFPRCxFQUFZQyxJQUNDQyxFQUFHc0MsR0FBTXZDLEVBQUtDLEVBQUdzQyxJQUNuQyxJQUFLLElBQUlDLEdBQU14QyxFQUFLQyxFQUFHdUMsR0FBTXhDLEVBQUtDLEVBQUd1QyxJQUNuQyxHQUFJOUIsS0FBS0MsSUFBSTRCLEdBQU03QixLQUFLQyxJQUFJNkIsR0FBTTlCLEtBQUtDLEtBQUs0QixFQUFLQyxHQUFlLEVBQVR4QyxFQUFLQyxFQUFPLENBQ2pFLE1BQU13QyxJQUFPRixFQUFLQyxHQUNoQkksRUFBVXhELEVBQUlNLFNBQ1pOLEVBQUk2QyxJQUFJN0IsRUFBUSxDQUFFVCxFQUFHNEMsRUFBSTNDLEVBQUc0QyxFQUFJM0MsRUFBRzRDLElBQ25DLFFBRUpFLEVBQVFsQixJQUFJbUIsRUFBUWxCLEdBQUlrQixHQUk5QixPQUFPRCxTQVFILFNBQVVFLFNBQVF6QyxPQUN0QkEsRUFBU2IsRUFBUWMsT0FDakJBLEVBQVNQLEVBQU9FLEtBQ2hCQSxFQUFPLElBRVAsTUFBTTZDLEVBQW1CLElBQUlyQixLQUMzQlYsS0FBRUEsRUFBSU8sS0FBRUEsR0FBU2xCLEVBQVUsQ0FBRUMsT0FBQUEsRUFBUUMsT0FBQUEsSUFDdkNMLEVBQU9ELEVBQVlDLEdBQ25CLElBQUssSUFBSXVDLEVBQUssRUFBR0EsRUFBS3ZDLEVBQUtDLEVBQUdzQyxJQUM1QixJQUFLLElBQUlDLEVBQUssRUFBR0EsRUFBS3hDLEVBQUtFLEVBQUdzQyxJQUFNLENBQ2xDLE1BQU1DLElBQU9GLEVBQUtDLEdBQ2hCVixFQUFVMUMsRUFBSU0sU0FDWk4sRUFBSTZDLElBQ0YsQ0FDRVMsQ0FBQzVCLEVBQUt5QixJQUFLbEIsRUFBT2tCLEVBQ2xCRyxDQUFDNUIsRUFBSzBCLElBQUtuQixFQUFPbUIsRUFDbEJFLENBQUM1QixFQUFLMkIsSUFBS3BCLEVBQU9vQixHQUVwQnJDLEdBRUYsUUFFSnlDLEVBQVFwQixJQUFJSyxFQUFRSixHQUFJSSxHQUc1QixPQUFPZSxTQVFILFNBQVVDLGFBQWE3QyxFQUFZQyxHQUN2QyxNQUFNNEMsRUFBd0IsSUFBSXRCLElBQ2xDLElBQUssTUFBT3VCLEVBQUtDLEtBQVEvQyxFQUNuQkMsRUFBRStDLElBQUlGLElBQVEzRCxFQUFJbUMsU0FBU3JCLEVBQUVnRCxJQUFJSCxHQUFxQkMsSUFDeERGLEVBQWFyQixJQUFJc0IsRUFBS0MsR0FHMUIsT0FBT0YifQ==