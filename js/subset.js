import*as S from"./hex.js";import{round as ee}from"./cell.js";import{cubeLerp as te}from"./math.js";const re=Object.freeze(S.makeNode({q:0,r:0,s:0},"Cell")),oe=Object.freeze(S.makeNode({q:2,r:-1,s:-1},"Cell")),ne=function(e){return"number"==typeof e?[e,e]:[e[0],e[1]]},se=function({source:e=re,toward:t=oe}){const r=["q","r","s"],o=S.subtract(t,e),n=Math.max(Math.abs(o.q),Math.abs(o.r),Math.abs(o.s));for(const e of r)if(n===Math.abs(o[e])){const t=-n/o[e]>0?1:-1;return{dirs:Object.fromEntries([...r.slice(r.indexOf(e)),...r.slice(0,r.indexOf(e))].map(((e,t)=>[["ic","ia","ib"][t],e]))),sign:t}}return null};export function line({source:e=re,toward:t=oe}){if(S.areEqual(e,t))return(new Map).set(e.id,e);const r=S.distance(e,t),o=new Map;for(let n=0;n<=r;n++){const s=ee(te(e,t,1/r*n));o.set(s.id,s)}return o}export function ring({source:e=re,size:t=2}){if((t=ne(t))[0]<1)return(new Map).set(e.id,e);const r=new Map;let o=S.makeNode(S.add(e,S.multiply(S.DIRECTIONS[4],t[0])),"Cell");for(let e=0;e<6;e++)for(let n=0;n<t[0];n++)r.set(o.id,o),o=S.cells(o)[e];return r}export function cone({source:e=re,toward:t=oe,size:r=4}){const o=new Map,{dirs:n,sign:s}=se({source:e,toward:t});r=ne(r);for(let t=0;t<r[0];t++)for(let a=0;a<r[0]-t;a++){const r=-(t+a),i=S.makeNode(S.add({[n.ia]:s*t,[n.ib]:s*a,[n.ic]:s*r},e),"Cell");o.set(i.id,i)}return o}export function hexagon({source:e=re,size:t=2}){if((t=ne(t))[0]<1)return(new Map).set(e.id,e);const r=new Map;for(let o=-t[0];o<=t[0];o++)for(let n=-t[0];n<=t[0];n++)if(Math.abs(o)+Math.abs(n)+Math.abs(-o-n)<2*t[0]){const t=-(o+n),s=S.makeNode(S.add(e,{q:o,r:n,s:t}),"Cell");r.set(s.id,s)}return r}export function rhombus({source:e=re,toward:t=oe,size:r=2}){const o=new Map,{dirs:n,sign:s}=se({source:e,toward:t});r=ne(r);for(let t=0;t<r[0];t++)for(let a=0;a<r[0];a++){const r=-(t+a),i=S.makeNode(S.add({[n.ia]:s*t,[n.ib]:s*a,[n.ic]:s*r},e),"Cell");o.set(i.id,i)}return o}export function intersection(e,t){const r=new Map;for(const[o,n]of e.entries())t.has(o)&&S.areEqual(t.get(o),n)&&r.set(o,n);return r}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIZXgiLCJyb3VuZCIsImN1YmVMZXJwIiwiQ0VMTFpFUk8iLCJPYmplY3QiLCJmcmVlemUiLCJtYWtlTm9kZSIsInEiLCJyIiwicyIsIkNFTExPTkUiLCJtYWtlVHdvU2l6ZSIsInNpemUiLCJmaW5kV2VkZ2UiLCJzb3VyY2UiLCJ0b3dhcmQiLCJoZXhDb29yZHMiLCJkaXIiLCJzdWJ0cmFjdCIsIm1heCIsIk1hdGgiLCJhYnMiLCJjb29yZCIsImRpcmVjdGlvblNpZ24iLCJkaXJzIiwiZnJvbUVudHJpZXMiLCJzbGljZSIsImluZGV4T2YiLCJtYXAiLCJlIiwiaSIsInNpZ24iLCJsaW5lIiwiYXJlRXF1YWwiLCJNYXAiLCJzZXQiLCJpZCIsInQiLCJkaXN0YW5jZSIsImlpIiwibmV3Q2VsbCIsInJpbmciLCJyaW5nQ2VsbCIsImFkZCIsIm11bHRpcGx5IiwiRElSRUNUSU9OUyIsImlqIiwiY2VsbHMiLCJjb25lIiwiaWEiLCJpYiIsImljIiwiaGV4YWdvbiIsIm5ld05vZGUiLCJyaG9tYnVzIiwiaW50ZXJzZWN0aW9uIiwiYSIsImIiLCJrZXkiLCJ2YWwiLCJlbnRyaWVzIiwiaGFzIiwiZ2V0Il0sInNvdXJjZXMiOlsiLi4vc3JjL3N1YnNldC50cyJdLCJtYXBwaW5ncyI6IlVBSVlBLE1BQVMsMkJBQ1pDLE9BQWEsK0JBQ2JDLE9BQWdCLFlBbUJ6QixNQUFNQyxHQUF5QkMsT0FBT0MsT0FDbENMLEVBQUlNLFNBQVMsQ0FBRUMsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FBSyxTQUVyQ0MsR0FBd0JOLE9BQU9DLE9BQzdCTCxFQUFJTSxTQUFTLENBQUVDLEVBQUcsRUFBR0MsR0FBSSxFQUFHQyxHQUFJLEdBQUssU0FFdkNFLEdBQWMsU0FBcUJDLEdBQ2pDLE1BQW9CLGlCQUFUQSxFQUNGLENBQUNBLEVBQU1BLEdBRVQsQ0FBQ0EsRUFBSyxHQUFJQSxFQUFLLEdBQ3hCLEVBQ0FDLEdBQVksVUFBbUJDLE9BQzdCQSxFQUFTWCxHQUFRWSxPQUNqQkEsRUFB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