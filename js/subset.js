import*as m from"./hex.js";import{round as O}from"./cell.js";import{cubeLerp as D}from"./math.js";const B=Object.freeze(m.makeNode({q:0,r:0,s:0},"Cell")),F=Object.freeze(m.makeNode({q:2,r:-1,s:-1},"Cell")),G=function(e){return"number"==typeof e?{a:e,b:e}:e},H=function({source:e=B,toward:t=F}){const r=["q","r","s"],o=m.subtract(t,e),a=Math.max(Math.abs(o.q),Math.abs(o.r),Math.abs(o.s));for(const e of r)if(a===Math.abs(o[e])){const t=-a/o[e]>0?1:-1;return{dirs:Object.fromEntries([...r.slice(r.indexOf(e)),...r.slice(0,r.indexOf(e))].map((e,t)=>[["ic","ia","ib"][t],e])),sign:t}}return null};export function line({source:e=B,toward:t=F}){if(m.areEqual(e,t))return(new Map).set(e.id,e);const r=m.distance(e,t),o=new Map;for(let a=0;a<=r;a++){const s=O(D(e,t,1/r*a));o.set(s.id,s)}return o}export function ring({source:e=B,size:t=2}){if((t=G(t)).a<1)return(new Map).set(e.id,e);const r=new Map;let o=m.makeNode(m.add(e,m.multiply(m.DIRECTIONS[4],t.a)),"Cell");for(let e=0;e<6;e++)for(let a=0;a<t.a;a++)r.set(o.id,o),o=m.cells(o)[e];return r}export function cone({source:e=B,toward:t=F,size:r=4}){const o=new Map,{dirs:a,sign:s}=H({source:e,toward:t});r=G(r);for(let t=0;t<r.a;t++)for(let n=0;n<r.a-t;n++){const r=-(t+n),i=m.makeNode(m.add({[a.ia]:s*t,[a.ib]:s*n,[a.ic]:s*r},e),"Cell");o.set(i.id,i)}return o}export function hexagon({source:e=B,size:t=2}){const r=new Map;for(let o=-(t=G(t)).a;o<=t.a;o++)for(let a=-t.a;a<=t.a;a++)if(Math.abs(o)+Math.abs(a)+Math.abs(-o-a)<2*t.a){const t=-(o+a),s=m.makeNode(m.add(e,{q:o,r:a,s:t}),"Cell");r.set(s.id,s)}return r}export function rhombus({source:e=B,toward:t=F,size:r=2}){const o=new Map,{dirs:a,sign:s}=H({source:e,toward:t});r=G(r);for(let t=0;t<r.a;t++)for(let n=0;n<r.b;n++){const r=-(t+n),i=m.makeNode(m.add({[a.ia]:s*t,[a.ib]:s*n,[a.ic]:s*r},e),"Cell");o.set(i.id,i)}return o}export function intersection(e,t){const r=new Map;for(const[o,a]of e)t.has(o)&&m.areEqual(t.get(o),a)&&r.set(o,a);return r}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdWJzZXQudHMiXSwibmFtZXMiOlsiSGV4Iiwicm91bmQiLCJjdWJlTGVycCIsIkNFTExaRVJPIiwiT2JqZWN0IiwiZnJlZXplIiwibWFrZU5vZGUiLCJxIiwiciIsInMiLCJDRUxMT05FIiwibWFrZVR3b1NpemUiLCJzaXplIiwiYSIsImIiLCJmaW5kV2VkZ2UiLCJzb3VyY2UiLCJ0b3dhcmQiLCJoZXhDb29yZHMiLCJkaXIiLCJzdWJ0cmFjdCIsIm1heCIsIk1hdGgiLCJhYnMiLCJjb29yZCIsImRpcmVjdGlvblNpZ24iLCJkaXJzIiwiZnJvbUVudHJpZXMiLCJzbGljZSIsImluZGV4T2YiLCJtYXAiLCJlIiwiaSIsInNpZ24iLCJsaW5lIiwiYXJlRXF1YWwiLCJNYXAiLCJzZXQiLCJpZCIsInQiLCJkaXN0YW5jZSIsImlpIiwibmV3Q2VsbCIsInJpbmciLCJyaW5nQ2VsbCIsImFkZCIsIm11bHRpcGx5IiwiRElSRUNUSU9OUyIsImlqIiwiY2VsbHMiLCJjb25lIiwiaWEiLCJpYiIsImljIiwiW29iamVjdCBPYmplY3RdIiwiaGV4YWdvbiIsIm5ld05vZGUiLCJyaG9tYnVzIiwiaW50ZXJzZWN0aW9uIiwia2V5IiwidmFsIiwiaGFzIiwiZ2V0Il0sIm1hcHBpbmdzIjoiVUFJWUEsTUFBUywyQkFDWkMsTUFBYSwrQkFDYkMsTUFBZ0IsWUFTekIsTUFBTUMsRUFBeUJDLE9BQU9DLE9BQ2xDTCxFQUFJTSxTQUFTLENBQUVDLEVBQUcsRUFBR0MsRUFBRyxFQUFHQyxFQUFHLEdBQUssU0FFckNDLEVBQXdCTixPQUFPQyxPQUM3QkwsRUFBSU0sU0FBUyxDQUFFQyxFQUFHLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQUFLLFNBRXZDRSxFQUFjLFNBQWdCQyxHQUM1QixNQUFvQixpQkFBVEEsRUFDRixDQUFFQyxFQUFHRCxFQUFNRSxFQUFHRixHQUVoQkEsR0FFVEcsRUFBWSxVQUFtQkMsT0FDN0JBLEVBQVNiLEVBQVFjLE9BQ2pCQSxFQUFTUCxJQUtU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