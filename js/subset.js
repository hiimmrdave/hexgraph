import*as e from"./hex.js";import{round as t}from"./cell.js";import{cubeLerp as r}from"./math.js";const o=Object.freeze(e.makeNode({q:0,r:0,s:0},"Cell")),n=Object.freeze(e.makeNode({q:2,r:-1,s:-1},"Cell")),s=function(e){return"number"==typeof e?[e,e]:[e[0],e[1]]},a=function({source:t=o,toward:r=n}){const s=["q","r","s"],a=e.subtract(r,t),i=Math.max(Math.abs(a.q),Math.abs(a.r),Math.abs(a.s));for(const e of s)if(i===Math.abs(a[e])){const t=-i/a[e]>0?1:-1;return{dirs:Object.fromEntries([...s.slice(s.indexOf(e)),...s.slice(0,s.indexOf(e))].map(((e,t)=>[["ic","ia","ib"][t],e]))),sign:t}}return null};export function line({source:s=o,toward:a=n}){if(e.areEqual(s,a))return(new Map).set(s.id,s);const i=e.distance(s,a),c=new Map;for(let e=0;e<=i;e++){const o=t(r(s,a,1/i*e));c.set(o.id,o)}return c}export function ring({source:t=o,size:r=2}){if((r=s(r))[0]<1)return(new Map).set(t.id,t);const n=new Map;let a=e.makeNode(e.add(t,e.multiply(e.DIRECTIONS[4],r[0])),"Cell");for(let t=0;t<6;t++)for(let o=0;o<r[0];o++)n.set(a.id,a),a=e.cells(a)[t];return n}export function cone({source:t=o,toward:r=n,size:i=4}){const c=new Map,{dirs:f,sign:l}=a({source:t,toward:r});i=s(i);for(let r=0;r<i[0];r++)for(let o=0;o<i[0]-r;o++){const n=-(r+o),s=e.makeNode(e.add({[f.ia]:l*r,[f.ib]:l*o,[f.ic]:l*n},t),"Cell");c.set(s.id,s)}return c}export function hexagon({source:t=o,size:r=2}){if((r=s(r))[0]<1)return(new Map).set(t.id,t);const n=new Map;for(let o=-r[0];o<=r[0];o++)for(let s=-r[0];s<=r[0];s++)if(Math.abs(o)+Math.abs(s)+Math.abs(-o-s)<2*r[0]){const r=-(o+s),a=e.makeNode(e.add(t,{q:o,r:s,s:r}),"Cell");n.set(a.id,a)}return n}export function rhombus({source:t=o,toward:r=n,size:i=2}){const c=new Map,{dirs:f,sign:l}=a({source:t,toward:r});i=s(i);for(let r=0;r<i[0];r++)for(let o=0;o<i[0];o++){const n=-(r+o),s=e.makeNode(e.add({[f.ia]:l*r,[f.ib]:l*o,[f.ic]:l*n},t),"Cell");c.set(s.id,s)}return c}export function intersection(t,r){const o=new Map;for(const[n,s]of t.entries())r.has(n)&&e.areEqual(r.get(n),s)&&o.set(n,s);return o}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdWJzZXQudHMiXSwibmFtZXMiOlsiSGV4Iiwicm91bmQiLCJjdWJlTGVycCIsIkNFTExaRVJPIiwiT2JqZWN0IiwiZnJlZXplIiwibWFrZU5vZGUiLCJxIiwiciIsInMiLCJDRUxMT05FIiwibWFrZVR3b1NpemUiLCJzaXplIiwiZmluZFdlZGdlIiwic291cmNlIiwidG93YXJkIiwiaGV4Q29vcmRzIiwiZGlyIiwic3VidHJhY3QiLCJtYXgiLCJNYXRoIiwiYWJzIiwiY29vcmQiLCJkaXJlY3Rpb25TaWduIiwiZGlycyIsImZyb21FbnRyaWVzIiwic2xpY2UiLCJpbmRleE9mIiwibWFwIiwiZSIsImkiLCJzaWduIiwibGluZSIsImFyZUVxdWFsIiwiTWFwIiwic2V0IiwiaWQiLCJ0IiwiZGlzdGFuY2UiLCJpaSIsIm5ld0NlbGwiLCJyaW5nIiwicmluZ0NlbGwiLCJhZGQiLCJtdWx0aXBseSIsIkRJUkVDVElPTlMiLCJpaiIsImNlbGxzIiwiY29uZSIsImlhIiwiaWIiLCJpYyIsImhleGFnb24iLCJuZXdOb2RlIiwicmhvbWJ1cyIsImludGVyc2VjdGlvbiIsImEiLCJiIiwia2V5IiwidmFsIiwiZW50cmllcyIsImhhcyIsImdldCJdLCJtYXBwaW5ncyI6IlVBSVlBLE1BQVMsMkJBQ1pDLE1BQWEsK0JBQ2JDLE1BQWdCLFlBbUJ6QixNQUFNQyxFQUF5QkMsT0FBT0MsT0FDbENMLEVBQUlNLFNBQVMsQ0FBRUMsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FBSyxTQUVyQ0MsRUFBd0JOLE9BQU9DLE9BQzdCTCxFQUFJTSxTQUFTLENBQUVDLEVBQUcsRUFBR0MsR0FBSSxFQUFHQyxHQUFJLEdBQUssU0FFdkNFLEVBQWMsU0FBcUJDLEdBQ2pDLE1BQW9CLGlCQUFUQSxFQUNGLENBQUNBLEVBQU1BLEdBRVQsQ0FBQ0EsRUFBSyxHQUFJQSxFQUFLLEtBRXhCQyxFQUFZLFVBQW1CQyxPQUM3QkEsRUFBU1gsRUFBUVksT0FDakJBLEVBQVNMLElB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