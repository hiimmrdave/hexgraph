import { vertices as n, edges as o, makeNode as r } from "./hex.js";
export function makeTwoSize(e) {
  return "number" == typeof e ? [e, e] : e;
}
export function makeGrid({ shape: e = "Hexagon", size: n = [3, 1], populate: t = !0 } = {}) {
  return t
    ? { Hexagon: l, Triangle: s, Star: f, Parallelogram: p, Rectangle: c }[e]({ size: n })
    : new Map();
}
function i(e = new Map(), t, a, i = -t - a) {
  const l = new Map(e),
    s = r({ q: t, r: a, s: i }, "Cell");
  return (
    l.set(s.id, s),
    n(s).forEach((e) => {
      s.links.add(e), e.links.add(s), l.set(e.id, e);
    }),
    o(s).forEach((e) => {
      s.links.add(e), e.links.add(s), l.set(e.id, e);
    }),
    l
  );
}
function l({ size: e, grid: n }) {
  const [t] = makeTwoSize(e);
  let o = n ? new Map(n) : new Map();
  for (let e = -t; e <= t; e++)
    for (let n = -t; n <= t; n++)
      Math.abs(e) + Math.abs(n) + Math.abs(-e - n) < 2 * t && (o = i(o, e, n));
  return o;
}
function s({ size: e, grid: n }) {
  const [t] = makeTwoSize(e);
  let o = n ? new Map(n) : new Map();
  for (let e = 0; e < t; e++) for (let n = 0; n < t - e; n++) o = i(o, e, n);
  return o;
}
function f({ size: e, grid: n }) {
  const [t] = makeTwoSize(e);
  let o = n ? new Map(n) : new Map();
  for (let e = 1 - t; e < t; e++)
    for (let n = 1 - t; n < t; n++) {
      const t = -e - n;
      (o = i(o, e, n)), (o = i(o, t, n)), (o = i(o, e, t));
    }
  return o;
}
function p({ size: e, grid: n }) {
  const [t, o] = makeTwoSize(e);
  let r = n ? new Map(n) : new Map();
  for (let e = 0; e < t; e++) for (let n = 0; n < o; n++) r = i(r, e, n);
  return r;
}
function c({ size: e, grid: n }) {
  const [t, o] = makeTwoSize(e);
  let r = n ? new Map(n) : new Map();
  for (let e = 0; e < t; e++) {
    const n = Math.floor(e / 2);
    for (let t = -n; t < o - n; t++) r = i(r, e, t);
  }
  return r;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZXJ0aWNlcyIsImVkZ2VzIiwibWFrZU5vZGUiLCJtYWtlVHdvU2l6ZSIsInNpemUiLCJtYWtlR3JpZCIsInNoYXBlIiwicG9wdWxhdGUiLCJIZXhhZ29uIiwicG9wdWxhdGVIZXhhZ29uR3JpZCIsIlRyaWFuZ2xlIiwicG9wdWxhdGVUcmlhbmdsZUdyaWQiLCJTdGFyIiwicG9wdWxhdGVTdGFyR3JpZCIsIlBhcmFsbGVsb2dyYW0iLCJwb3B1bGF0ZVBhcmFsbGVsb2dyYW1HcmlkIiwiUmVjdGFuZ2xlIiwicG9wdWxhdGVSZWN0YW5nbGVHcmlkIiwiTWFwIiwiZ3JpZFB1c2giLCJncmlkIiwicSIsInIiLCJzIiwiY2VsbHNldCIsImNlbGwiLCJzZXQiLCJpZCIsImZvckVhY2giLCJ2ZXJ0ZXgiLCJsaW5rcyIsImFkZCIsImVkZ2UiLCJ4IiwiaWEiLCJpYiIsIk1hdGgiLCJhYnMiLCJpYyIsInkiLCJvZmYiLCJmbG9vciJdLCJzb3VyY2VzIjpbIi4uL3NyYy9ncmlkLnRzIl0sIm1hcHBpbmdzIjoibUJBRzRCQSxXQUFVQyxjQUFPQyxNQUFnQixrQkEwQnZELFNBQVVDLFlBQVlDLEdBQzFCLE1BQW9CLGlCQUFUQSxFQUNGLENBQUNBLEVBQU1BLEdBRVRBLFNBR0gsU0FBVUMsVUFBU0MsTUFDdkJBLEVBQVEsVUFBU0YsS0FDakJBLEVBQU8sQ0FBQyxFQUFHLEdBQUVHLFNBQ2JBLEdBQVcsR0FLVCxJQVFGLE9BQUlBLEVBUG9ELENBQ3REQyxRQUFTQyxFQUNUQyxTQUFVQyxFQUNWQyxLQUFNQyxFQUNOQyxjQUFlQyxFQUNmQyxVQUFXQyxHQUdVWCxHQUFPLENBQUVGLFNBRXpCLElBQUljLElBVWIsU0FBU0MsRUFBU0MsRUFBZ0IsSUFBSUYsSUFBT0csRUFBV0MsRUFBV0MsR0FBYUYsRUFBSUMsR0FDbEYsTUFBTUUsRUFBVSxJQUFJTixJQUFJRSxHQUN0QkssRUFBT3ZCLEVBQVMsQ0FBRW1CLElBQUdDLElBQUdDLEtBQUssUUFZL0IsT0FYQUMsRUFBUUUsSUFBSUQs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
