import{thousandthRound as I}from"./math.js";export const DIRECTIONS=[{q:1,r:-1,s:0},{q:0,r:-1,s:1},{q:-1,r:0,s:1},{q:-1,r:1,s:0},{q:0,r:1,s:-1},{q:1,r:0,s:-1}];export const DIAGONALS=[{q:2,r:-1,s:-1},{q:1,r:-2,s:1},{q:-1,r:-1,s:2},{q:-2,r:1,s:1},{q:-1,r:2,s:-1},{q:1,r:1,s:-2}];export function makeNode({q:e,r:r,s:t},s){if(e+r+t>.001)throw new TypeError("q+r+s must sum to zero");const n={q:e,r:r,s:t,id:`${I(e)},${I(r)},${I(t)}`,links:new WeakSet,kind:s};return n}export function cells(e){switch(e.kind){case"Cell":return DIRECTIONS.map((r=>makeNode(add(e,r),"Cell")));case"Edge":return DIRECTIONS.map((r=>makeNode(add(e,multiply(r,.5)),"Cell"))).filter((e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Cell"))).filter((e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)))}}export function edges(e){switch(e.kind){case"Cell":return DIRECTIONS.map((r=>makeNode(add(multiply(r,.5),e),"Edge")));case"Edge":return DIRECTIONS.map((r=>makeNode(add(e,multiply(r,.5)),"Edge"))).filter((e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s))));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/6)),"Edge"))).filter((e=>Number.isInteger(2*e.q)&&Number.isInteger(2*e.r)&&Number.isInteger(2*e.s)))}}export function vertices(e){switch(e.kind){case"Cell":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Vertex")));case"Edge":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/6)),"Vertex"))).filter((e=>Number.isInteger(3*e.q)&&Number.isInteger(3*e.r)&&Number.isInteger(3*e.s)));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Vertex"))).filter((e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s))))}}export function areEqual(e,r){return e.q===r.q&&e.r===r.r&&e.s===r.s}export function add(e,r){return{q:e.q+r.q,r:e.r+r.r,s:e.s+r.s}}export function subtract(e,r){return{q:e.q-r.q,r:e.r-r.r,s:e.s-r.s}}export function multiply(e,r){return{q:e.q*r,r:e.r*r,s:e.s*r}}export function length({q:e,r:r,s:t}){return Math.max(Math.abs(e),Math.abs(r),Math.abs(t))}export function distance(e,r){return length(subtract(e,r))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0aG91c2FuZHRoUm91bmQiLCJESVJFQ1RJT05TIiwicSIsInIiLCJzIiwiRElBR09OQUxTIiwibWFrZU5vZGUiLCJraW5kIiwiVHlwZUVycm9yIiwicmVzdWx0IiwiaWQiLCJsaW5rcyIsIldlYWtTZXQiLCJjZWxscyIsIm5vZGUiLCJtYXAiLCJlIiwiYWRkIiwibXVsdGlwbHkiLCJmaWx0ZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJlZGdlcyIsInZlcnRpY2VzIiwiYXJlRXF1YWwiLCJhIiwiYiIsInN1YnRyYWN0IiwiY2VsbCIsImsiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwiYWJzIiwiZGlzdGFuY2UiXSwic291cmNlcyI6WyIuLi9zcmMvaGV4LnRzIl0sIm1hcHBpbmdzIjoiMEJBSVNBLE1BQXVCLG1CQThEekIsTUFBTUMsV0FBMEIsQ0FDckMsQ0FBRUMsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksV0FLYixNQUFNQyxVQUF5QixDQUNwQyxDQUFFSCxFQUFHLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNuQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxXQVVkLFNBQVVFLFVBQVNKLEVBQUVBLEVBQUNDLEVB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