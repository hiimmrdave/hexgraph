import{thousandthRound as e}from"./math.js";export const DIRECTIONS=[{q:1,r:-1,s:0},{q:0,r:-1,s:1},{q:-1,r:0,s:1},{q:-1,r:1,s:0},{q:0,r:1,s:-1},{q:1,r:0,s:-1}];export const DIAGONALS=[{q:2,r:-1,s:-1},{q:1,r:-2,s:1},{q:-1,r:-1,s:2},{q:-2,r:1,s:1},{q:-1,r:2,s:-1},{q:1,r:1,s:-2}];export function makeNode({q:r,r:t,s:s},n){if(r+t+s>.001)throw new TypeError("q+r+s must sum to zero");const u={q:r,r:t,s:s,id:`${e(r)},${e(t)},${e(s)}`,links:new WeakSet,kind:n};return u}export function cells(e){switch(e.kind){case"Cell":return DIRECTIONS.map((r=>makeNode(add(e,r),"Cell")));case"Edge":return DIRECTIONS.map((r=>makeNode(add(e,multiply(r,.5)),"Cell"))).filter((e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Cell"))).filter((e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)));default:return e}}export function edges(e){switch(e.kind){case"Cell":return DIRECTIONS.map((r=>makeNode(add(multiply(r,.5),e),"Edge")));case"Edge":return DIRECTIONS.map((r=>makeNode(add(e,multiply(r,.5)),"Edge"))).filter((e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s))));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/6)),"Edge"))).filter((e=>Number.isInteger(2*e.q)&&Number.isInteger(2*e.r)&&Number.isInteger(2*e.s)));default:return e}}export function vertices(e){switch(e.kind){case"Cell":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Vertex")));case"Edge":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/6)),"Vertex"))).filter((e=>Number.isInteger(3*e.q)&&Number.isInteger(3*e.r)&&Number.isInteger(3*e.s)));case"Vertex":return DIAGONALS.map((r=>makeNode(add(e,multiply(r,1/3)),"Vertex"))).filter((e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s))));default:return e}}export function areEqual(e,r){return e.q===r.q&&e.r===r.r&&e.s===r.s}export function add(e,r){return{q:e.q+r.q,r:e.r+r.r,s:e.s+r.s}}export function subtract(e,r){return{q:e.q-r.q,r:e.r-r.r,s:e.s-r.s}}export function multiply(e,r){return{q:e.q*r,r:e.r*r,s:e.s*r}}export function length({q:e,r:r,s:t}){return Math.max(Math.abs(e),Math.abs(r),Math.abs(t))}export function distance(e,r){return length(subtract(e,r))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZXgudHMiXSwibmFtZXMiOlsidGhvdXNhbmR0aFJvdW5kIiwiRElSRUNUSU9OUyIsInEiLCJyIiwicyIsIkRJQUdPTkFMUyIsIm1ha2VOb2RlIiwia2luZCIsIlR5cGVFcnJvciIsInJlc3VsdCIsImlkIiwibGlua3MiLCJXZWFrU2V0IiwiY2VsbHMiLCJub2RlIiwibWFwIiwiZSIsImFkZCIsIm11bHRpcGx5IiwiZmlsdGVyIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZWRnZXMiLCJ2ZXJ0aWNlcyIsImFyZUVxdWFsIiwiYSIsImIiLCJzdWJ0cmFjdCIsImNlbGwiLCJrIiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsImFicyIsImRpc3RhbmNlIl0sIm1hcHBpbmdzIjoiMEJBSVNBLE1BQXVCLG1CQThEekIsTUFBTUMsV0FBMEIsQ0FDckMsQ0FBRUMsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksV0FLYixNQUFNQyxVQUF5QixDQUNwQyxDQUFFSCxFQUFHLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNuQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxXQVVkLFNBQVVFLFVBQVNKLEVBQUVBLEVBQUNDLEVB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