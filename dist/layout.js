import * as HexMath from "./math.js";
import { vertices } from "./hex.js";
export function orientation(theta = 0) {
    return {
        f: {
            q: {
                x: Math.cos(theta - HexMath.PI_OVER_SIX) * HexMath.SQRT_THREE,
                y: Math.sin(theta + 5 * HexMath.PI_OVER_SIX) * HexMath.SQRT_THREE,
            },
            r: {
                x: Math.cos(theta - HexMath.HALF_PI) * HexMath.SQRT_THREE,
                y: Math.sin(theta + HexMath.HALF_PI) * HexMath.SQRT_THREE,
            },
        },
        b: {
            q: {
                x: (Math.cos(theta) * 2) / 3,
                y: (Math.sin(theta) * -2) / 3,
            },
            r: {
                x: (Math.cos(theta + 2 * HexMath.PI_OVER_SIX) * -2) / 3,
                y: (Math.sin(theta + 2 * HexMath.PI_OVER_SIX) * 2) / 3,
            },
        },
    };
}
export function config(theta, radius, origin, size) {
    return { orientation: orientation(theta), radius, origin, size };
}
export function cubeToPoint(c, { orientation: o, radius, origin }) {
    const x = (o.f.q.x * c.q + o.f.r.x * c.r) * radius.x + origin.x, y = (o.f.q.y * c.q + o.f.r.y * c.r) * radius.y + origin.y;
    return { x, y };
}
export function pointToCube(p, { orientation: o, radius, origin }) {
    const pt = {
        x: (p.x - origin.x) / radius.x,
        y: (p.y - origin.y) / radius.y,
    }, q = o.b.q.x * pt.x + o.b.q.y * pt.y, r = o.b.r.x * pt.x + o.b.r.y * pt.y, s = -q - r;
    return { q, r, s };
}
export function cellPoints({ cell, layout, }) {
    return vertices(cell).map(vertex => cubeToPoint(vertex, layout));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWdDekQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUNuQyxPQUFPO1FBQ0wsQ0FBQyxFQUFFO1lBQ0QsQ0FBQyxFQUFFO2dCQUNELENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVU7Z0JBQzdELENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxVQUFVO2FBQ2xFO1lBQ0QsQ0FBQyxFQUFFO2dCQUNELENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVU7Z0JBQ3pELENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVU7YUFDMUQ7U0FDRjtRQUNELENBQUMsRUFBRTtZQUNELENBQUMsRUFBRTtnQkFDRCxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBQzVCLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQzlCO1lBQ0QsQ0FBQyxFQUFFO2dCQUNELENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMs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