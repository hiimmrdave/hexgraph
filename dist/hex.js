import { thousandthRound } from "./math.js";
export const DIRECTIONS = [
    { q: 1, r: -1, s: 0 },
    { q: 0, r: -1, s: 1 },
    { q: -1, r: 0, s: 1 },
    { q: -1, r: 1, s: 0 },
    { q: 0, r: 1, s: -1 },
    { q: 1, r: 0, s: -1 },
];
export const DIAGONALS = [
    { q: 2, r: -1, s: -1 },
    { q: 1, r: -2, s: 1 },
    { q: -1, r: -1, s: 2 },
    { q: -2, r: 1, s: 1 },
    { q: -1, r: 2, s: -1 },
    { q: 1, r: 1, s: -2 },
];
export function makeNode({ q, r, s }, kind) {
    if (q + r + s > 1e-3) {
        throw new TypeError("q+r+s must sum to zero");
    }
    const result = {
        q,
        r,
        s,
        id: `${thousandthRound(q)},${thousandthRound(r)},${thousandthRound(s)}`,
        links: new WeakSet(),
        kind,
    };
    switch (kind) {
        case "Cell":
            return result;
        case "Edge":
            return result;
        case "Vertex":
            return result;
        default:
            return result;
    }
}
export function cells(node) {
    switch (node.kind) {
        case "Cell":
            return DIRECTIONS.map(e => makeNode(add(node, e), "Cell"));
        case "Edge":
            return DIRECTIONS.map(e => makeNode(add(node, multiply(e, 0.5)), "Cell")).filter(e => Number.isInteger(e.q) &&
                Number.isInteger(e.r) &&
                Number.isInteger(e.s));
        case "Vertex":
            return DIAGONALS.map(e => makeNode(add(node, multiply(e, 1 / 3)), "Cell")).filter(e => Number.isInteger(e.q) &&
                Number.isInteger(e.r) &&
                Number.isInteger(e.s));
        default:
            return node;
    }
}
export function edges(node) {
    switch (node.kind) {
        case "Cell":
            return DIRECTIONS.map(e => makeNode(add(multiply(e, 5e-1), node), "Edge"));
        case "Edge":
            return DIRECTIONS.map(e => makeNode(add(node, multiply(e, 0.5)), "Edge")).filter(e => !(Number.isInteger(e.q) &&
                Number.isInteger(e.r) &&
                Number.isInteger(e.s)));
        case "Vertex":
            return DIAGONALS.map(e => makeNode(add(node, multiply(e, 1 / 6)), "Edge")).filter(e => Number.isInteger(e.q * 2) &&
                Number.isInteger(e.r * 2) &&
                Number.isInteger(e.s * 2));
        default:
            return node;
    }
}
export function vertices(node) {
    switch (node.kind) {
        case "Cell":
            return DIAGONALS.map(e => makeNode(add(node, multiply(e, 1 / 3)), "Vertex"));
        case "Edge":
            return DIAGONALS.map(e => makeNode(add(node, multiply(e, 1 / 6)), "Vertex")).filter(e => Number.isInteger(e.q * 3) &&
                Number.isInteger(e.r * 3) &&
                Number.isInteger(e.s * 3));
        case "Vertex":
            return DIAGONALS.map(e => makeNode(add(node, multiply(e, 1 / 3)), "Vertex")).filter(e => !(Number.isInteger(e.q) &&
                Number.isInteger(e.r) &&
                Number.isInteger(e.s)));
        default:
            return node;
    }
}
export function areEqual(a, b) {
    return a.q === b.q && a.r === b.r && a.s === b.s && a.nodetype === b.nodetype;
}
export function add(a, b) {
    return { q: a.q + b.q, r: a.r + b.r, s: a.s + b.s };
}
export function subtract(a, b) {
    return { q: a.q - b.q, r: a.r - b.r, s: a.s - b.s };
}
export function multiply(cell, k) {
    return { q: cell.q * k, r: cell.r * k, s: cell.s * k };
}
export function length({ q, r, s }) {
    return Math.max(Math.abs(q), Math.abs(r), Math.abs(s));
}
export function distance(a, b) {
    return length(subtract(a, b));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBMEQ1QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQWdCO0lBQ3JDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNyQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDckIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNyQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDckIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0NBQ3RCLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWdCO0lBQ3BDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3RCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNyQixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMs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