import{thousandthRound as x}from"./math.js";export const DIRECTIONS=[{q:1,r:-1,s:0},{q:0,r:-1,s:1},{q:-1,r:0,s:1},{q:-1,r:1,s:0},{q:0,r:1,s:-1},{q:1,r:0,s:-1}];export const DIAGONALS=[{q:2,r:-1,s:-1},{q:1,r:-2,s:1},{q:-1,r:-1,s:2},{q:-2,r:1,s:1},{q:-1,r:2,s:-1},{q:1,r:1,s:-2}];export function makeNode({q:e,r:r,s:t},s){if(e+r+t>.001)throw new TypeError("q+r+s must sum to zero");const n={q:e,r:r,s:t,id:`${x(e)},${x(r)},${x(t)}`,links:new WeakSet,kind:s};switch(s){case"Cell":case"Edge":case"Vertex":default:return n}}export function cells(e){switch(e.kind){case"Cell":return DIRECTIONS.map(r=>makeNode(add(e,r),"Cell"));case"Edge":return DIRECTIONS.map(r=>makeNode(add(e,multiply(r,.5)),"Cell")).filter(e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s));case"Vertex":return DIAGONALS.map(r=>makeNode(add(e,multiply(r,1/3)),"Cell")).filter(e=>Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s));default:return e}}export function edges(e){switch(e.kind){case"Cell":return DIRECTIONS.map(r=>makeNode(add(multiply(r,.5),e),"Edge"));case"Edge":return DIRECTIONS.map(r=>makeNode(add(e,multiply(r,.5)),"Edge")).filter(e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)));case"Vertex":return DIAGONALS.map(r=>makeNode(add(e,multiply(r,1/6)),"Edge")).filter(e=>Number.isInteger(2*e.q)&&Number.isInteger(2*e.r)&&Number.isInteger(2*e.s));default:return e}}export function vertices(e){switch(e.kind){case"Cell":return DIAGONALS.map(r=>makeNode(add(e,multiply(r,1/3)),"Vertex"));case"Edge":return DIAGONALS.map(r=>makeNode(add(e,multiply(r,1/6)),"Vertex")).filter(e=>Number.isInteger(3*e.q)&&Number.isInteger(3*e.r)&&Number.isInteger(3*e.s));case"Vertex":return DIAGONALS.map(r=>makeNode(add(e,multiply(r,1/3)),"Vertex")).filter(e=>!(Number.isInteger(e.q)&&Number.isInteger(e.r)&&Number.isInteger(e.s)));default:return e}}export function areEqual(e,r){return e.q===r.q&&e.r===r.r&&e.s===r.s&&e.kind===r.kind}export function add(e,r){return{q:e.q+r.q,r:e.r+r.r,s:e.s+r.s}}export function subtract(e,r){return{q:e.q-r.q,r:e.r-r.r,s:e.s-r.s}}export function multiply(e,r){return{q:e.q*r,r:e.r*r,s:e.s*r}}export function length({q:e,r:r,s:t}){return Math.max(Math.abs(e),Math.abs(r),Math.abs(t))}export function distance(e,r){return length(subtract(e,r))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZXgudHMiXSwibmFtZXMiOlsidGhvdXNhbmR0aFJvdW5kIiwiRElSRUNUSU9OUyIsInEiLCJyIiwicyIsIkRJQUdPTkFMUyIsIm1ha2VOb2RlIiwia2luZCIsIlR5cGVFcnJvciIsInJlc3VsdCIsImlkIiwibGlua3MiLCJXZWFrU2V0IiwiY2VsbHMiLCJub2RlIiwibWFwIiwiZSIsImFkZCIsIm11bHRpcGx5IiwiZmlsdGVyIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZWRnZXMiLCJ2ZXJ0aWNlcyIsImFyZUVxdWFsIiwiYSIsImIiLCJzdWJ0cmFjdCIsImNlbGwiLCJrIiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsImFicyIsImRpc3RhbmNlIl0sIm1hcHBpbmdzIjoiMEJBUVNBLE1BQXVCLG1CQXVEekIsTUFBTUMsV0FBMEIsQ0FDckMsQ0FBRUMsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxHQUFJLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsR0FBSSxFQUFHQyxFQUFHLEVBQUdDLEVBQUcsR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksR0FDbEIsQ0FBRUYsRUFBRyxFQUFHQyxFQUFHLEVBQUdDLEdBQUksV0FFYixNQUFNQyxVQUF5QixDQUNwQyxDQUFFSCxFQUFHLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEdBQUksRUFBR0MsRUFBRyxHQUNuQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsRUFBRyxHQUNsQixDQUFFRixHQUFJLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxHQUNuQixDQUFFRixFQUFHLEVBQUdDLEVBQUcsRUFBR0MsR0FBSSxXQVVkLFNBQVVFLFVBQVNKLEVBQUVBLEVBQUNDLEVB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